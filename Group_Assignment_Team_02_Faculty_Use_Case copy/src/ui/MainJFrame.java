/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui;

import info5100.university.example.CourseCatalog.Course;
import info5100.university.example.CourseSchedule.CourseOffer;
import info5100.university.example.CourseSchedule.CourseSchedule;
import info5100.university.example.Department.Department;
import info5100.university.example.Persona.Faculty.FacultyDirectory;
import info5100.university.example.Persona.Faculty.UserAccountDirectory;
import info5100.university.example.Persona.Person;
import info5100.university.example.Persona.StudentDirectory;
import info5100.university.example.Persona.StudentProfile;
import info5100.university.example.Persona.UserAccount;
import info5100.university.example.workareas.Workarea;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import ui.AdminJPanel;


/**
 *
 * @author zenishborad
 */
public class MainJFrame extends javax.swing.JFrame {
    private UserAccountDirectory userAccountDirectory;
    private FacultyDirectory facultyDirectory;
    private StudentDirectory studentDirectory;


    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(MainJFrame.class.getName());

    /**
     * Creates new form MainJFrame
     */
  public MainJFrame() {
    initComponents();
    populateFacultyData(); // pre-populate faculty
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        splitPane = new javax.swing.JSplitPane();
        actionPanel = new javax.swing.JPanel();
        lblUsername = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        btnLogIn = new javax.swing.JButton();
        pfPassword = new javax.swing.JPasswordField();
        workArea = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        actionPanel.setBackground(new java.awt.Color(255, 204, 204));

        lblUsername.setText("Username");

        lblPassword.setText("Password");

        btnLogIn.setText("Log In");
        btnLogIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogInActionPerformed(evt);
            }
        });

        pfPassword.setText("jPas");
        pfPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pfPasswordActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout actionPanelLayout = new javax.swing.GroupLayout(actionPanel);
        actionPanel.setLayout(actionPanelLayout);
        actionPanelLayout.setHorizontalGroup(
            actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(actionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtUsername)
                    .addComponent(btnLogIn, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                    .addGroup(actionPanelLayout.createSequentialGroup()
                        .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPassword)
                            .addComponent(lblUsername))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(pfPassword))
                .addContainerGap())
        );
        actionPanelLayout.setVerticalGroup(
            actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(actionPanelLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(lblUsername)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(lblPassword)
                .addGap(18, 18, 18)
                .addComponent(pfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(btnLogIn)
                .addContainerGap(258, Short.MAX_VALUE))
        );

        splitPane.setLeftComponent(actionPanel);

        workArea.setLayout(new java.awt.CardLayout());

        lblTitle.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        lblTitle.setText("Digital University Model");
        workArea.add(lblTitle, "card2");

        splitPane.setRightComponent(workArea);

        getContentPane().add(splitPane);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pfPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pfPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pfPasswordActionPerformed

    private void btnLogInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogInActionPerformed
        // TODO add your handling code here:
                                                                                     
                                         
    String username = txtUsername.getText().trim();
    String password = new String(pfPassword.getPassword());

    if (username.isEmpty() || password.isEmpty()) {
        JOptionPane.showMessageDialog(this, 
            "Please enter both username and password", 
            "Validation Error", 
            JOptionPane.ERROR_MESSAGE);
        return;
    }

    UserAccount user = authenticateUser(username, password);

    if (user != null) {
        JOptionPane.showMessageDialog(this, 
            "Login Successful! Welcome, " + user.getPerson().getName(), 
            "Login Success", 
            JOptionPane.INFORMATION_MESSAGE);

        // Clear work area before showing new panel
        workArea.removeAll();

        // --- Route by Role ---
       if (user.getRole().toString().equalsIgnoreCase("Faculty")) {

            FacultyJPanel facultyPanel = new FacultyJPanel(workArea, user, facultyDirectory);
            workArea.add("FacultyPanel", facultyPanel);
        } 
    else if (user.getRole().toString().equalsIgnoreCase("Admin")) {

            AdminJPanel adminPanel = new AdminJPanel(workArea);
            workArea.add("AdminPanel", adminPanel);
        } 
        else {
            JOptionPane.showMessageDialog(this, 
                "Unknown user role: " + user.getRole(), 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        // --- Show the appropriate panel ---
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.next(workArea);
        workArea.revalidate();
        workArea.repaint();
    } 
    else {
        JOptionPane.showMessageDialog(this, 
            "Invalid username or password", 
            "Login Failed", 
            JOptionPane.ERROR_MESSAGE);
        pfPassword.setText("");
    }


   
    
    }//GEN-LAST:event_btnLogInActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new MainJFrame().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel actionPanel;
    private javax.swing.JButton btnLogIn;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JPasswordField pfPassword;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JTextField txtUsername;
    private javax.swing.JPanel workArea;
    // End of variables declaration//GEN-END:variables

   

   private UserAccount authenticateUser(String username, String password) {
    for (UserAccount ua : userAccountDirectory.getUserAccountList()) {
        if (ua.getUsername().equals(username) && ua.getPassword().equals(password)) {
            return ua; // Authentication successful
        }
    }
    return null; // Authentication failed
}

private void populateFacultyData() {
    
    // --- Add one Admin User ---


    // --- Initialize UserAccountDirectory if null ---
    if (userAccountDirectory == null) {
        userAccountDirectory = new UserAccountDirectory(null); 
    }

    // --- Create Department and CourseSchedules ---
    Department defaultDept = new Department("Computer Science");
    CourseSchedule fall2025 = defaultDept.newCourseSchedule("Fall2025");
    CourseSchedule spring2026 = defaultDept.newCourseSchedule("Spring2026");

    // --- Initialize directories ---
    facultyDirectory = new FacultyDirectory(defaultDept);
    studentDirectory = new StudentDirectory(defaultDept);
    
    
    Person adminPerson = new Person("A001", "System Admin", "admin@university.com", "999-999-9999", "admin123");
userAccountDirectory.newUserAccount("admin", "admin123", adminPerson, null, "Admin");


    // --- Faculty Names ---
    String[] facultyNames = {
        "John Don", "Marsha Mellow", "Carol Davis", "Justin Time",
        "Eva Brown", "Frank Miller", "Arun Yadav", "Henry Taylor",
        "KJ", "Jack Anderson"
    };

    // --- Create faculty users and profiles ---
    for (int i = 0; i < facultyNames.length; i++) {
        String username = "faculty" + (i + 1);
        String password = "pass" + (i + 1);

        Person p = new Person(
            "F" + (i + 1),
            facultyNames[i],
            "faculty" + (i + 1) + "@university.com",
            "123-456-78" + i,
            password
        );

        userAccountDirectory.newUserAccount(username, password, p, null, "Faculty");
        facultyDirectory.newFacultyProfile(p, defaultDept);
    }

    // --- Courses ---
    Course c1 = new Course("Application Engineering", "INFO5100", 3);
    Course c2 = new Course("Data Science", "INFO6105", 3);
    Course c3 = new Course("Database Systems", "INFO5200", 3);
    Course c4 = new Course("Machine Learning", "INFO6101", 3);
    Course c5 = new Course("Software Architecture", "INFO5300", 3);
    Course c6 = new Course("Cyber Security", "INFO5400", 3);

    // --- Course Offers ---
   CourseOffer co1 = new CourseOffer(c1);
co1.setSemester("Fall 2025");

    CourseOffer co2 = new CourseOffer(c2);
    co2.setSemester("Fall 2025");

    CourseOffer co3 = new CourseOffer(c3);
    co3.setSemester("Fall 2025");

    CourseOffer co4 = new CourseOffer(c4);
    co4.setSemester("Fall 2025");

    CourseOffer co5 = new CourseOffer(c5);
    co5.setSemester("Fall 2025");

    CourseOffer co6 = new CourseOffer(c6);
    co6.setSemester("Fall 2025");


    co1.setSyllabusName("Application Engineering Syllabus v1");
    co3.setSyllabusName("Database Systems Syllabus v2");
    co5.setSyllabusName("Software Architecture Syllabus v1");

    // --- Assign courses to faculty ---
    facultyDirectory.getFacultyList().get(0).AssignAsTeacher(co1);
    facultyDirectory.getFacultyList().get(0).AssignAsTeacher(co2);
    facultyDirectory.getFacultyList().get(1).AssignAsTeacher(co2);
    facultyDirectory.getFacultyList().get(1).AssignAsTeacher(co3);
    facultyDirectory.getFacultyList().get(1).AssignAsTeacher(co4);
    facultyDirectory.getFacultyList().get(2).AssignAsTeacher(co1);
    facultyDirectory.getFacultyList().get(2).AssignAsTeacher(co5);
    facultyDirectory.getFacultyList().get(2).AssignAsTeacher(co6);
    facultyDirectory.getFacultyList().get(3).AssignAsTeacher(co3);
    facultyDirectory.getFacultyList().get(3).AssignAsTeacher(co4);
    facultyDirectory.getFacultyList().get(4).AssignAsTeacher(co5);
    facultyDirectory.getFacultyList().get(4).AssignAsTeacher(co6);
    facultyDirectory.getFacultyList().get(5).AssignAsTeacher(co1);
    facultyDirectory.getFacultyList().get(5).AssignAsTeacher(co2);
    facultyDirectory.getFacultyList().get(6).AssignAsTeacher(co3);
    facultyDirectory.getFacultyList().get(6).AssignAsTeacher(co4);
    facultyDirectory.getFacultyList().get(7).AssignAsTeacher(co5);
    facultyDirectory.getFacultyList().get(8).AssignAsTeacher(co6);
    facultyDirectory.getFacultyList().get(9).AssignAsTeacher(co1);
    facultyDirectory.getFacultyList().get(9).AssignAsTeacher(co4);

    // --- Students ---
    StudentProfile sp1 = studentDirectory.newStudentProfile(new Person("S001", "Alice Johnson", "alice@uni.com", "123-456-7890", "pass1"));
    StudentProfile sp2 = studentDirectory.newStudentProfile(new Person("S002", "Bob Smith", "bob@uni.com", "123-456-7891", "pass2"));
    StudentProfile sp3 = studentDirectory.newStudentProfile(new Person("S003", "Charlie Lee", "charlie@uni.com", "123-456-7892", "pass3"));
    StudentProfile sp4 = studentDirectory.newStudentProfile(new Person("S004", "Diana Prince", "diana@uni.com", "123-456-7893", "pass4"));
    StudentProfile sp5 = studentDirectory.newStudentProfile(new Person("S005", "Ethan Hunt", "ethan@uni.com", "123-456-7894", "pass5"));
    StudentProfile sp6 = studentDirectory.newStudentProfile(new Person("S006", "Fiona Gallagher", "fiona@uni.com", "123-456-7895", "pass6"));

    // --- Initialize CourseLoad for Fall2025 for all students ---
    sp1.newCourseLoad("Fall2025");
    sp2.newCourseLoad("Fall2025");
    sp3.newCourseLoad("Fall2025");
    sp4.newCourseLoad("Fall2025");
    sp5.newCourseLoad("Fall2025");
    sp6.newCourseLoad("Fall2025");

    // --- Add course offers to Fall2025 schedule ---
    fall2025.getSchedule().add(co1);
    fall2025.getSchedule().add(co2);
    fall2025.getSchedule().add(co3);
    fall2025.getSchedule().add(co4);
    fall2025.getSchedule().add(co5);
    fall2025.getSchedule().add(co6);

    // --- Generate seats for each course ---
    co1.generatSeats(40);
    co2.generatSeats(40);
    co3.generatSeats(40);
    co4.generatSeats(40);
    co5.generatSeats(40);
    co6.generatSeats(40);

    // --- Enroll students safely ---
    defaultDept.RegisterForAClass("S001", "INFO5100", "Fall2025");
    defaultDept.RegisterForAClass("S001", "INFO6105", "Fall2025");

    defaultDept.RegisterForAClass("S002", "INFO6105", "Fall2025");
    defaultDept.RegisterForAClass("S002", "INFO5200", "Fall2025");

    defaultDept.RegisterForAClass("S003", "INFO5100", "Fall2025");
    defaultDept.RegisterForAClass("S003", "INFO5200", "Fall2025");

    defaultDept.RegisterForAClass("S004", "INFO5300", "Fall2025");
    defaultDept.RegisterForAClass("S004", "INFO5400", "Fall2025");

    defaultDept.RegisterForAClass("S005", "INFO6105", "Fall2025");
    defaultDept.RegisterForAClass("S005", "INFO5300", "Fall2025");

    defaultDept.RegisterForAClass("S006", "INFO5400", "Fall2025");
    defaultDept.RegisterForAClass("S006", "INFO6101", "Fall2025");
}
}