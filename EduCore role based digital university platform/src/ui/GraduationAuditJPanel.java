/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.awt.CardLayout;
import java.awt.Color; // Import Color for status display
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.JPanel;
import model.Course;
import model.Enrollment;
import model.Student;
import model.directory.EnrollmentDirectory;

/**
 *
 * @author Your Name
 */
public class GraduationAuditJPanel extends javax.swing.JPanel {

    private JPanel workArea;
    private Student loggedInStudent;
    private EnrollmentDirectory enrollmentDirectory;

    // --- Graduation Requirements ---
    private static final int REQUIRED_TOTAL_CREDITS = 32;
    private static final String REQUIRED_CORE_COURSE_ID = "INFO5100";
    private static final Set<String> PASSING_GRADES = new HashSet<>(List.of(
        "A", "A-", "B+", "B", "B-", "C+", "C", "C-" // Grades considered passing for credit
    ));


    /**
     * Creates new form GraduationAuditJPanel
     */
    public GraduationAuditJPanel(JPanel workArea, Student loggedInStudent, EnrollmentDirectory enrollmentDirectory) {
        this.workArea = workArea;
        this.loggedInStudent = loggedInStudent;
        this.enrollmentDirectory = enrollmentDirectory;
        initComponents();
        performAudit(); // Run the audit when the panel is created
    }

    private void performAudit() {
        int totalCreditsEarned = 0;
        boolean coreCourseCompleted = false;
        List<String> reasonsNotReady = new ArrayList<>();
        Set<String> completedCourseIds = new HashSet<>(); // To avoid counting retaken courses multiple times

        // 1. Iterate through student's enrollments
        for (Enrollment en : enrollmentDirectory.getEnrollments()) {
            if (en.getStudent().getUniversityId().equals(loggedInStudent.getUniversityId())) {
                Course course = en.getCourse();
                String grade = en.getGrade();
                String courseId = course.getCourseId();

                // 2. Check if the course was passed and not already counted
                if (PASSING_GRADES.contains(grade) && !completedCourseIds.contains(courseId)) {
                    totalCreditsEarned += course.getCredits();
                    completedCourseIds.add(courseId); // Mark course ID as completed

                    // 3. Check if it's the required core course
                    if (REQUIRED_CORE_COURSE_ID.equals(courseId)) {
                        coreCourseCompleted = true;
                    }
                }
            }
        }

        // 4. Evaluate requirements
        boolean meetsCreditRequirement = totalCreditsEarned >= REQUIRED_TOTAL_CREDITS;
        boolean meetsCoreRequirement = coreCourseCompleted;
        boolean isReadyToGraduate = meetsCreditRequirement && meetsCoreRequirement;

        // 5. Update UI Labels
        lblTotalCreditsReq.setText("Total Credits Required: " + REQUIRED_TOTAL_CREDITS);
        lblCoreCourseReq.setText("Core Course Required: " + REQUIRED_CORE_COURSE_ID);

        lblTotalCreditsEarned.setText("Total Credits Earned (Passing Grades): " + totalCreditsEarned);
        lblCoreCourseStatus.setText("Core Course (" + REQUIRED_CORE_COURSE_ID + ") Completed: " + (meetsCoreRequirement ? "Yes" : "No"));

        // 6. Update Final Status and Details
        if (isReadyToGraduate) {
            lblGraduationStatus.setText("READY TO GRADUATE");
            lblGraduationStatus.setForeground(new Color(0, 153, 0)); // Green color
            txtAuditDetails.setText("Congratulations! All graduation requirements have been met.");
        } else {
            lblGraduationStatus.setText("NOT READY TO GRADUATE");
            lblGraduationStatus.setForeground(Color.RED);

            if (!meetsCreditRequirement) {
                reasonsNotReady.add("- Insufficient credits earned (" + totalCreditsEarned + " / " + REQUIRED_TOTAL_CREDITS + "). Need " + (REQUIRED_TOTAL_CREDITS - totalCreditsEarned) + " more credits with passing grades.");
            }
            if (!meetsCoreRequirement) {
                reasonsNotReady.add("- Required core course " + REQUIRED_CORE_COURSE_ID + " not completed with a passing grade.");
            }
            txtAuditDetails.setText("Reasons:\n" + String.join("\n", reasonsNotReady));
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblRequirements = new javax.swing.JLabel();
        lblTotalCreditsReq = new javax.swing.JLabel();
        lblCoreCourseReq = new javax.swing.JLabel();
        lblProgress = new javax.swing.JLabel();
        lblTotalCreditsEarned = new javax.swing.JLabel();
        lblCoreCourseStatus = new javax.swing.JLabel();
        lblGraduationStatus = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAuditDetails = new javax.swing.JTextArea();
        btnBack = new javax.swing.JButton();

        lblTitle.setText("Graduation Audit (MSIS Program)");

        lblRequirements.setText("Requirements:");

        lblTotalCreditsReq.setText("Total Credits Required: 32");

        lblCoreCourseReq.setText("Core Course Required: INFO5100");

        lblProgress.setText("Your Progress:");

        lblTotalCreditsEarned.setText("Total Credits Earned (Passing Grades): 0");

        lblCoreCourseStatus.setText("Core Course (INFO5100) Completed: No");

        lblGraduationStatus.setText("STATUS");

        txtAuditDetails.setColumns(20);
        txtAuditDetails.setRows(5);
        jScrollPane1.setViewportView(txtAuditDetails);

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBack)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGraduationStatus)
                    .addComponent(lblCoreCourseStatus)
                    .addComponent(lblTotalCreditsEarned)
                    .addComponent(lblProgress)
                    .addComponent(lblCoreCourseReq)
                    .addComponent(lblTotalCreditsReq)
                    .addComponent(lblRequirements)
                    .addComponent(lblTitle))
                .addContainerGap(367, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblRequirements)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblTotalCreditsReq)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblCoreCourseReq)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblProgress)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblTotalCreditsEarned)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblCoreCourseStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblGraduationStatus)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(btnBack)
                .addContainerGap(113, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        workArea.remove(this);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.previous(workArea);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCoreCourseReq;
    private javax.swing.JLabel lblCoreCourseStatus;
    private javax.swing.JLabel lblGraduationStatus;
    private javax.swing.JLabel lblProgress;
    private javax.swing.JLabel lblRequirements;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTotalCreditsEarned;
    private javax.swing.JLabel lblTotalCreditsReq;
    private javax.swing.JTextArea txtAuditDetails;
    // End of variables declaration//GEN-END:variables
}
