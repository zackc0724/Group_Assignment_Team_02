/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import info5100.university.example.CourseCatalog.Course;
import info5100.university.example.CourseSchedule.CourseOffer;
import info5100.university.example.CourseSchedule.Seat;
import info5100.university.example.CourseSchedule.SeatAssignment;
import info5100.university.example.Department.Department;
import info5100.university.example.Persona.Faculty.FacultyProfile;
import java.awt.CardLayout;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author zenishborad
 */
public class PerformanceReportingJPanel extends javax.swing.JPanel {
private javax.swing.JPanel workArea;
    private FacultyProfile facultyProfile;
    private Department department;
    /**
     * Creates new form PerformanceReportingJPanel
     */
       public PerformanceReportingJPanel(JPanel workArea, FacultyProfile facultyProfile, Department department) {
        this.workArea = workArea;
        this.facultyProfile = facultyProfile;
        this.department = department;
        initComponents();
        populateCourseCombo();
        populateSemesterCombo();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblCourse = new javax.swing.JLabel();
        cmbCourse = new javax.swing.JComboBox<>();
        btnGenerateReport = new javax.swing.JButton();
        lblAverageGrade = new javax.swing.JLabel();
        lblEnrollment = new javax.swing.JLabel();
        txtAverageGrade = new javax.swing.JTextField();
        txtEnrollment = new javax.swing.JTextField();
        lblSemester = new javax.swing.JLabel();
        cmbSemester = new javax.swing.JComboBox<>();
        btnExport = new javax.swing.JButton();
        lblGradeDistribution = new javax.swing.JLabel();
        txtGradeDistribution = new javax.swing.JTextField();
        btnBack = new javax.swing.JButton();

        lblCourse.setText("Course");

        cmbCourse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnGenerateReport.setText("Generate Report");
        btnGenerateReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateReportActionPerformed(evt);
            }
        });

        lblAverageGrade.setText("Average grade");

        lblEnrollment.setText("Enrollment");

        txtAverageGrade.setEditable(false);

        txtEnrollment.setEditable(false);

        lblSemester.setText("Semester");

        cmbSemester.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnExport.setText("Export");
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        lblGradeDistribution.setText("Grade Distribution");

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblEnrollment)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCourse)
                            .addComponent(lblSemester))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbCourse, 0, 101, Short.MAX_VALUE)
                            .addComponent(cmbSemester, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(160, 160, 160)
                        .addComponent(btnGenerateReport))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnExport)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblAverageGrade)
                                .addGap(74, 74, 74)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtEnrollment, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                                    .addComponent(txtAverageGrade))))
                        .addGap(39, 39, 39)
                        .addComponent(lblGradeDistribution)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtGradeDistribution, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(49, Short.MAX_VALUE))
            .addComponent(btnBack, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCourse)
                    .addComponent(cmbCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGenerateReport))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSemester)
                    .addComponent(cmbSemester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAverageGrade)
                    .addComponent(txtAverageGrade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGradeDistribution)
                    .addComponent(txtGradeDistribution, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEnrollment)
                    .addComponent(txtEnrollment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(82, 82, 82)
                .addComponent(btnExport)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 171, Short.MAX_VALUE)
                .addComponent(btnBack))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        // TODO add your handling code here:
         String course = (String) cmbCourse.getSelectedItem();
    String semester = (String) cmbSemester.getSelectedItem();
    String avgGrade = txtAverageGrade.getText();
    String enrollment = txtEnrollment.getText();

    if (course == null || avgGrade.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please generate a report first.");
        return;
    }

    try (FileWriter writer = new FileWriter("CoursePerformanceReport.csv")) {
        writer.write("Course,Semester,Average Grade,Enrollment\n");
        writer.write(course + "," + semester + "," + avgGrade + "," + enrollment + "\n");
        JOptionPane.showMessageDialog(this, "Report exported successfully!");
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error exporting report: " + e.getMessage());
    }
    }//GEN-LAST:event_btnExportActionPerformed

    private void btnGenerateReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateReportActionPerformed
    // Inside PerformanceReportingJPanel.java

    
    String selectedCourseInfo = (String) cmbCourse.getSelectedItem();
    String selectedSemester = (String) cmbSemester.getSelectedItem();

    if (selectedCourseInfo == null || selectedSemester == null) {
        JOptionPane.showMessageDialog(this, "Please select a course and a semester.");
        return;
    }

    // Example: The selectedCourseInfo is likely in the format "INFO5100 - Course Name"
    
    // Step 1: Extract the Course Code (e.g., "INFO5100")
    String courseCode = selectedCourseInfo.split(" - ")[0].trim();
    
    // Step 2: Use a Regular Expression to remove all non-digit characters
    // This will strip "INFO" and leave only the numeric part "5100"
    String courseNumberString = courseCode.replaceAll("[^0-9]", ""); 
    
    // Step 3: Parse the clean numeric string
    int courseNumber;
    try {
        courseNumber = Integer.parseInt(courseNumberString);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Error parsing course number. Please ensure course code ends with numbers.");
        // Log the error if necessary
        return;
    }

    CourseOffer selectedCourseOffer = findCourseOffer(courseNumber, selectedSemester);

    if (selectedCourseOffer == null) {
        JOptionPane.showMessageDialog(this, "No course offering found for the selected course and semester.");
        txtAverageGrade.setText("");
        txtEnrollment.setText("");
        txtGradeDistribution.setText("");
        return;
    }

    // Calculate Metrics
    calculatePerformanceMetrics(selectedCourseOffer);


   

    }//GEN-LAST:event_btnGenerateReportActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:                                     
    CardLayout layout = (CardLayout) workArea.getLayout();
    workArea.remove(this); // remove current panel
    layout.previous(workArea); // go back to previous one

    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnGenerateReport;
    private javax.swing.JComboBox<String> cmbCourse;
    private javax.swing.JComboBox<String> cmbSemester;
    private javax.swing.JLabel lblAverageGrade;
    private javax.swing.JLabel lblCourse;
    private javax.swing.JLabel lblEnrollment;
    private javax.swing.JLabel lblGradeDistribution;
    private javax.swing.JLabel lblSemester;
    private javax.swing.JTextField txtAverageGrade;
    private javax.swing.JTextField txtEnrollment;
    private javax.swing.JTextField txtGradeDistribution;
    // End of variables declaration//GEN-END:variables



    private void populateCourseCombo() {
    cmbCourse.removeAllItems();
    for (CourseOffer co : facultyProfile.getAssignedCourses()) {
        cmbCourse.addItem(
            co.getSubjectCourse().getCOurseNumber() + " - " + co.getSubjectCourse().getCourseName()
        );
    }
}

    
    
    
    private void populateSemesterCombo() {
        cmbSemester.removeAllItems();
    cmbSemester.addItem("Fall 2025");
    cmbSemester.addItem("Spring 2026");
}
// Inside PerformanceReportingJPanel class

private double getGradePoint(String letterGrade) {
    switch (letterGrade) {
        case "A": return 4.0;
        case "A−": return 3.7;
        case "B+": return 3.3;
        case "B": return 3.0;
        case "B−": return 2.7;
        case "C+": return 2.3;
        case "C": return 2.0;
        case "C−": return 1.7;
        case "F": return 0.0;
        default: return 0.0;
    }
}

private void calculatePerformanceMetrics(CourseOffer courseOffer) {
    ArrayList<Seat> seats = courseOffer.getSeatlist();
    double totalGradePoints = 0.0;
    int gradedStudentsCount = 0;
    int enrollmentCount = 0;
    Map<String, Integer> gradeDistribution = new HashMap<>();

    for (Seat seat : seats) {
        enrollmentCount++; // total enrolled students

        String grade = seat.getGrade(); // assuming Seat has getGrade()

        if (grade != null && !grade.isEmpty()) {
            double gradePoint = getGradePoint(grade);
            totalGradePoints += gradePoint;
            gradedStudentsCount++;

            // Count grade frequency
            gradeDistribution.put(grade, gradeDistribution.getOrDefault(grade, 0) + 1);
        }
    }

    double averageGPA = (gradedStudentsCount > 0) 
            ? totalGradePoints / gradedStudentsCount 
            : 0.0;

    // ✅ Update the text fields
    txtEnrollment.setText(String.valueOf(enrollmentCount));
    txtAverageGrade.setText(String.format("%.2f", averageGPA));
    txtGradeDistribution.setText(gradeDistribution.toString());

}
private CourseOffer findCourseOffer(int courseNumber, String semester) {
    for (CourseOffer co : facultyProfile.getAssignedCourses()) {
        if (co.getSemester() == null) continue; // skip null semester

        String cnStr = co.getSubjectCourse().getCOurseNumber().replaceAll("[^0-9]", "");
        int cn;
        try {
            cn = Integer.parseInt(cnStr);
        } catch (NumberFormatException e) {
            continue; // skip invalid course number
        }

        if (cn == courseNumber && semester.equals(co.getSemester())) {
            return co;
        }
    }
    return null; // no match
}


}
