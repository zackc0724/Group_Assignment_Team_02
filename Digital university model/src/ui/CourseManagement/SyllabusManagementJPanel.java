/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.CourseManagement;

// Import new model classes
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import model.Course;
import model.Faculty;
import model.directory.CourseDirectory;


/**
 *
 * @author zenishborad
 */
public class SyllabusManagementJPanel extends javax.swing.JPanel {
    private JPanel workArea;
    private Faculty loggedInFaculty;
    private CourseDirectory courseDirectory;
    private ArrayList<Course> facultyCourses; // Keep a list of courses for the combo box

    /**
     * Creates new form SyllabusManagementJPanel
     */
   public SyllabusManagementJPanel(JPanel workArea, Faculty loggedInFaculty, CourseDirectory courseDirectory) {
        this.workArea = workArea;
        this.loggedInFaculty = loggedInFaculty;
        this.courseDirectory = courseDirectory;
        this.facultyCourses = new ArrayList<>(); // Initialize the list
        initComponents();
        populateCourseComboBox();
        
        // Add listener to update text field when combo box changes
        cmbCourseName.addActionListener(e -> displaySelectedSyllabus());
   }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblCourse = new javax.swing.JLabel();
        cmbCourseName = new javax.swing.JComboBox<>();
        lblCurrentSyllabus = new javax.swing.JLabel();
        btnUploadNewSyllabus = new javax.swing.JButton();
        btnViewSyllabus = new javax.swing.JButton();
        txtSyllabusName = new javax.swing.JTextField();
        pgbUploadStatus = new javax.swing.JProgressBar();
        lblUploadStatus = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();

        lblCourse.setText("Select Course");

        cmbCourseName.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblCurrentSyllabus.setText("Current Syllabus :");

        btnUploadNewSyllabus.setText("Upload New Syllabus");
        btnUploadNewSyllabus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadNewSyllabusActionPerformed(evt);
            }
        });

        btnViewSyllabus.setText("View Syllabus");
        btnViewSyllabus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewSyllabusActionPerformed(evt);
            }
        });

        lblUploadStatus.setText("Upload Status");

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(btnUploadNewSyllabus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 183, Short.MAX_VALUE)
                .addComponent(btnViewSyllabus)
                .addGap(101, 101, 101))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblCurrentSyllabus)
                                .addGap(18, 18, 18)
                                .addComponent(txtSyllabusName))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblCourse)
                                .addGap(37, 37, 37)
                                .addComponent(cmbCourseName, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(lblUploadStatus)
                        .addGap(55, 55, 55)
                        .addComponent(pgbUploadStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(btnBack, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCourse)
                    .addComponent(cmbCourseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCurrentSyllabus, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSyllabusName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(66, 66, 66)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUploadNewSyllabus, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnViewSyllabus, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pgbUploadStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUploadStatus))
                .addGap(179, 179, 179)
                .addComponent(btnBack))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnUploadNewSyllabusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadNewSyllabusActionPerformed
        // TODO add your handling code here:                                                    
    int selectedIndex = cmbCourseName.getSelectedIndex();
        if (selectedIndex < 0) {
            lblUploadStatus.setText("Please select a course.");
            pgbUploadStatus.setValue(0);
            return;
        }

        // Get the selected Course object from our stored list
        Course selectedCourse = facultyCourses.get(selectedIndex);

        String newSyllabusName = txtSyllabusName.getText().trim();
        if (newSyllabusName.isEmpty()) {
            lblUploadStatus.setText("Please enter a syllabus name.");
            pgbUploadStatus.setValue(0);
            return;
        }

        // Update the syllabus name in the Course object
        selectedCourse.setSyllabusName(newSyllabusName);

        // Simulate upload progress
        pgbUploadStatus.setValue(100);
        lblUploadStatus.setText("Syllabus name updated successfully!");

    }//GEN-LAST:event_btnUploadNewSyllabusActionPerformed

    private void btnViewSyllabusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewSyllabusActionPerformed
        // TODO add your handling code here:                                               
    displaySelectedSyllabus();


    }//GEN-LAST:event_btnViewSyllabusActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
         workArea.remove(this);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.previous(workArea);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnUploadNewSyllabus;
    private javax.swing.JButton btnViewSyllabus;
    private javax.swing.JComboBox<String> cmbCourseName;
    private javax.swing.JLabel lblCourse;
    private javax.swing.JLabel lblCurrentSyllabus;
    private javax.swing.JLabel lblUploadStatus;
    private javax.swing.JProgressBar pgbUploadStatus;
    private javax.swing.JTextField txtSyllabusName;
    // End of variables declaration//GEN-END:variables

private void populateCourseComboBox() {
        cmbCourseName.removeAllItems();
        facultyCourses.clear(); // Clear the list before populating

        // Filter courses assigned to the logged-in faculty
        for (Course course : courseDirectory.getCourses()) {
            if (course.getFaculty() != null && course.getFaculty().getUniversityId().equals(loggedInFaculty.getUniversityId())) {
                facultyCourses.add(course); // Add the Course object to our list
                cmbCourseName.addItem(course.toString()); // Add the string representation to combo box
            }
        }
        
        // Display syllabus for the initially selected course (if any)
        displaySelectedSyllabus();
    }

    // Helper method to display the syllabus name for the selected course
    private void displaySelectedSyllabus() {
        int selectedIndex = cmbCourseName.getSelectedIndex();
        if (selectedIndex < 0) {
            txtSyllabusName.setText(""); // No course selected
            lblUploadStatus.setText("Select a course.");
            pgbUploadStatus.setValue(0);
            return;
        }

        // Get the selected Course object from our stored list
        Course selectedCourse = facultyCourses.get(selectedIndex);

        if (selectedCourse.getSyllabusName() != null && !selectedCourse.getSyllabusName().isEmpty()) {
            txtSyllabusName.setText(selectedCourse.getSyllabusName());
            lblUploadStatus.setText("Current syllabus loaded.");
            pgbUploadStatus.setValue(0);
        } else {
            txtSyllabusName.setText(""); // Clear if no syllabus exists
            lblUploadStatus.setText("No syllabus uploaded for this course yet.");
            pgbUploadStatus.setValue(0);
        }
    }

}




