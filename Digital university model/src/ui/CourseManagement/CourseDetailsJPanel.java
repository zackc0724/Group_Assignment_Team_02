/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.CourseManagement;

// Import new model classes
import info5100.university.example.model.directory.AssignmentDirectory;
import java.awt.CardLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.Course;
import model.Faculty;
import model.directory.CourseDirectory;

/**
 *
 * @author zenishborad
 */
public class CourseDetailsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CourseDetailsJPanel
     */
    private JPanel workArea;
    private Faculty loggedInFaculty;
    private CourseDirectory courseDirectory;
    private Course selectedCourse = null;
    private AssignmentDirectory assignmentDirectory;// To keep track of the selected course

    // New constructor
    public CourseDetailsJPanel(JPanel workArea, Faculty loggedInFaculty, CourseDirectory courseDirectory,
                           AssignmentDirectory assignmentDirectory) { // Added param
    this.workArea = workArea;
    this.loggedInFaculty = loggedInFaculty;
    this.courseDirectory = courseDirectory;
    this.assignmentDirectory = assignmentDirectory; // Assign param
    initComponents();
    populateScheduleComboBox();
    populateCourseTable();
        
        // Add a listener to the table to populate fields when a row is clicked
        tblCourseDetails.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                int selectedRow = tblCourseDetails.getSelectedRow();
                if (selectedRow >= 0) {
                    // Get the Course object from the selected row
                    selectedCourse = (Course) tblCourseDetails.getValueAt(selectedRow, 0);
                    if (selectedCourse != null) {
                        txtCourseCode.setText(selectedCourse.getCourseId());
                        txtTitle.setText(selectedCourse.getTitle());
                        // txtarDescription is not in our new model, so we'll leave it blank
                        txtarDescription.setText(""); 
                        cmbSchedule.setSelectedItem(selectedCourse.getSemester()); // Using semester for schedule
                        sprCapacity.setValue(selectedCourse.getCapacity());
                    }
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblCourseDetails = new javax.swing.JTable();
        lblCourseCode = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        lblDescription = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtarDescription = new javax.swing.JTextArea();
        txtCourseCode = new javax.swing.JTextField();
        txtTitle = new javax.swing.JTextField();
        lblSchedule = new javax.swing.JLabel();
        lblCapacity = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        cmbSchedule = new javax.swing.JComboBox<>();
        sprCapacity = new javax.swing.JSpinner();
        btnBack = new javax.swing.JButton();

        tblCourseDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Course Code", "Title", "Schedule", "Capacity"
            }
        ));
        jScrollPane1.setViewportView(tblCourseDetails);

        lblCourseCode.setText("Course Code");

        lblTitle.setText("Title");

        lblDescription.setText("Description");

        txtarDescription.setColumns(20);
        txtarDescription.setRows(5);
        jScrollPane2.setViewportView(txtarDescription);

        lblSchedule.setText("Schedule");

        lblCapacity.setText("Capacity");

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        cmbSchedule.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAdd)
                        .addGap(83, 83, 83)
                        .addComponent(btnUpdate)
                        .addGap(110, 110, 110)
                        .addComponent(btnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 106, Short.MAX_VALUE)
                        .addComponent(btnClear))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblDescription)
                                    .addComponent(lblCourseCode)
                                    .addComponent(lblTitle)
                                    .addComponent(lblSchedule)
                                    .addComponent(lblCapacity))
                                .addGap(67, 67, 67)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtCourseCode)
                                    .addComponent(txtTitle)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                                    .addComponent(sprCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbSchedule, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(btnBack))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnBack)
                .addGap(13, 13, 13)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCourseCode)
                    .addComponent(txtCourseCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTitle)
                    .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDescription)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSchedule)
                    .addComponent(cmbSchedule, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCapacity)
                    .addComponent(sprCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:                                     
    // Step 1: Read values from input fields
    String courseCode = txtCourseCode.getText();
        String title = txtTitle.getText();
        String schedule = (String) cmbSchedule.getSelectedItem(); // Using semester for schedule
        int capacity = (Integer) sprCapacity.getValue();
        // Assume a default credit value (e.g., 4) if not entered elsewhere
        int credits = 4; // Or get from another input field if you add one
        // Assume a default tuition value
        double tuition = 6000.0; // Make sure this is a double

        if(courseCode.isEmpty() || title.isEmpty() || schedule.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill all fields (Course Code, Title, Schedule).");
            return;
        }

        // *** THIS IS THE CORRECTED CONSTRUCTOR CALL ***
        Course newCourse = new Course(
            courseCode,
            title,
            schedule,       // Semester field used as schedule
            loggedInFaculty, // Assign to current faculty
            capacity,
            tuition,        // Pass the double tuition
            credits         // Pass the int credits
        );

        // Add to the central directory
        courseDirectory.addCourse(newCourse);

        // Refresh the table
        populateCourseTable();

        // Clear fields
        btnClearActionPerformed(evt);

    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        if (selectedCourse == null) {
            JOptionPane.showMessageDialog(this, "Please select a course from the table to update.");
            return;
        }

        String courseCode = txtCourseCode.getText();
        String title = txtTitle.getText();
        String schedule = (String) cmbSchedule.getSelectedItem();
        int capacity = (Integer) sprCapacity.getValue();

        if(courseCode.isEmpty() || title.isEmpty() || schedule.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill all fields.");
            return;
        }

        // Update the selected Course object
        selectedCourse.setCourseId(courseCode);
        selectedCourse.setTitle(title);
        selectedCourse.setSemester(schedule);
        selectedCourse.setCapacity(capacity);
        // Faculty (instructor) remains the same
        
        // Refresh table and clear fields
        populateCourseTable();
        btnClearActionPerformed(evt);

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
         if (selectedCourse == null) {
            JOptionPane.showMessageDialog(this, "Please select a course from the table to delete.");
            return;
        }
        
        // Optional: Add confirmation
        int confirm = JOptionPane.showConfirmDialog(
            this,
            "Are you sure you want to delete this course: " + selectedCourse.getTitle() + "?",
            "Confirm Deletion",
            JOptionPane.YES_NO_OPTION
        );

        if (confirm == JOptionPane.YES_OPTION) {
            // Remove from the central directory
            courseDirectory.getCourses().remove(selectedCourse);
            
            // Refresh table and clear fields
            populateCourseTable();
            btnClearActionPerformed(evt);
        }

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        txtCourseCode.setText("");
    txtTitle.setText("");
    txtarDescription.setText("");
    cmbSchedule.setSelectedIndex(0);
    sprCapacity.setValue(0);

    // Optional: deselect table row
    tblCourseDetails.clearSelection();
    selectedCourse = null;

    }//GEN-LAST:event_btnClearActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        workArea.remove(this);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.previous(workArea);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbSchedule;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCapacity;
    private javax.swing.JLabel lblCourseCode;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblSchedule;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JSpinner sprCapacity;
    private javax.swing.JTable tblCourseDetails;
    private javax.swing.JTextField txtCourseCode;
    private javax.swing.JTextField txtTitle;
    private javax.swing.JTextArea txtarDescription;
    // End of variables declaration//GEN-END:variables

   private void populateScheduleComboBox() {
    cmbSchedule.removeAllItems(); // clear any default "Item 1, Item 2" etc.

    // Add your schedules
    cmbSchedule.addItem("Fall2025");
        cmbSchedule.addItem("Spring2026");
        cmbSchedule.addItem("Fall2026");
}

 private void populateCourseTable() {
    DefaultTableModel model = (DefaultTableModel) tblCourseDetails.getModel();
    model.setRowCount(0);

    // Get all courses from the central directory
    ArrayList<Course> allCourses = courseDirectory.getCourses();
    
    // Filter for courses taught by this faculty
    for (Course course : allCourses) {
        if (course.getFaculty() != null && course.getFaculty().getUniversityId().equals(loggedInFaculty.getUniversityId())) {
            Object[] row = new Object[4];
            row[0] = course; // Store the actual Course object
            row[1] = course.getTitle();
            row[2] = course.getSemester();
            row[3] = course.getCapacity();
            model.addRow(row);
        }
    }
    
    // This override is to make sure the JTable displays the CourseId from the Course object
    tblCourseDetails.getColumnModel().getColumn(0).setCellRenderer(new javax.swing.table.DefaultTableCellRenderer() {
        @Override
        public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            if (value instanceof Course) {
                value = ((Course) value).getCourseId();
            }
            return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        }
    });
 }
}

