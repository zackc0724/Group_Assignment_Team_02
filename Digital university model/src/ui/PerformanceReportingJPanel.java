/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

// Import necessary classes
import java.awt.CardLayout;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import model.Course;
import model.Enrollment;
import model.Faculty;
import model.directory.CourseDirectory;
import model.directory.EnrollmentDirectory;
import model.directory.PersonDirectory;


/**
 *
 * @author zenishborad
 */
public class PerformanceReportingJPanel extends javax.swing.JPanel {
    private JPanel workArea;
    private Faculty loggedInFaculty;
    private CourseDirectory courseDirectory;
    private EnrollmentDirectory enrollmentDirectory;
    // PersonDirectory might not be needed here but good to have if extending later
    private PersonDirectory personDirectory;
    private ArrayList<Course> facultyCourses; // Courses for the combo box

    /**
     * Creates new form PerformanceReportingJPanel (Refactored)
     */
       public PerformanceReportingJPanel(JPanel workArea, Faculty loggedInFaculty, CourseDirectory courseDirectory, EnrollmentDirectory enrollmentDirectory, PersonDirectory personDirectory) {
        this.workArea = workArea;
        this.loggedInFaculty = loggedInFaculty;
        this.courseDirectory = courseDirectory;
        this.enrollmentDirectory = enrollmentDirectory;
        this.personDirectory = personDirectory;
        this.facultyCourses = new ArrayList<>();
        initComponents();
        populateCourseCombo();
        populateSemesterCombo(); // Populate semesters based on courses
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblCourse = new javax.swing.JLabel();
        cmbCourse = new javax.swing.JComboBox<>();
        btnGenerateReport = new javax.swing.JButton();
        lblAverageGrade = new javax.swing.JLabel();
        lblEnrollment = new javax.swing.JLabel();
        txtAverageGrade = new javax.swing.JTextField();
        txtEnrollment = new javax.swing.JTextField();
        lblSemester = new javax.swing.JLabel();
        cmbSemester = new javax.swing.JComboBox<>();
        btnExport = new javax.swing.JButton();
        lblGradeDistribution = new javax.swing.JLabel();
        txtGradeDistribution = new javax.swing.JTextField();
        btnBack = new javax.swing.JButton();

        lblCourse.setText("Course");

        cmbCourse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnGenerateReport.setText("Generate Report");
        btnGenerateReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateReportActionPerformed(evt);
            }
        });

        lblAverageGrade.setText("Average grade");

        lblEnrollment.setText("Enrollment");

        txtAverageGrade.setEditable(false);

        txtEnrollment.setEditable(false);

        lblSemester.setText("Semester");

        cmbSemester.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnExport.setText("Export");
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        lblGradeDistribution.setText("Grade Distribution");

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblEnrollment)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCourse)
                            .addComponent(lblSemester))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbCourse, 0, 101, Short.MAX_VALUE)
                            .addComponent(cmbSemester, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(160, 160, 160)
                        .addComponent(btnGenerateReport))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnExport)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblAverageGrade)
                                .addGap(74, 74, 74)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtEnrollment, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                                    .addComponent(txtAverageGrade))))
                        .addGap(39, 39, 39)
                        .addComponent(lblGradeDistribution)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtGradeDistribution, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(49, Short.MAX_VALUE))
            .addComponent(btnBack, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCourse)
                    .addComponent(cmbCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGenerateReport))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSemester)
                    .addComponent(cmbSemester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAverageGrade)
                    .addComponent(txtAverageGrade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGradeDistribution)
                    .addComponent(txtGradeDistribution, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEnrollment)
                    .addComponent(txtEnrollment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(82, 82, 82)
                .addComponent(btnExport)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 171, Short.MAX_VALUE)
                .addComponent(btnBack))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        // TODO add your handling code here:
        String courseInfo = (String) cmbCourse.getSelectedItem();
        String semester = (String) cmbSemester.getSelectedItem();
        String avgGrade = txtAverageGrade.getText();
        String enrollment = txtEnrollment.getText();
        String distribution = txtGradeDistribution.getText();

        if (courseInfo == null || avgGrade.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please generate a report first before exporting.");
            return;
        }

        String courseName = courseInfo; // Use the full combo box string
        String fileName = "CoursePerformanceReport_" + courseName.replaceAll("[^a-zA-Z0-9]", "") + "_" + semester + ".csv";

        try (FileWriter writer = new FileWriter(fileName)) {
            writer.write("Course,Semester,Average Grade (GPA),Enrollment,Grade Distribution\n");
            // Escape commas within the distribution string if necessary, basic CSV format assumes no commas in data
            writer.write("\"" + courseName + "\"," + semester + "," + avgGrade + "," + enrollment + ",\"" + distribution + "\"\n");
            JOptionPane.showMessageDialog(this, "Report exported successfully to " + fileName);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error exporting report: " + e.getMessage(), "Export Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnExportActionPerformed

    private void btnGenerateReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateReportActionPerformed
    int selectedCourseIndex = cmbCourse.getSelectedIndex();
        String selectedSemester = (String) cmbSemester.getSelectedItem();

        if (selectedCourseIndex < 0 || selectedSemester == null) {
            JOptionPane.showMessageDialog(this, "Please select both a course and a semester.");
            return;
        }

        Course selectedCourse = facultyCourses.get(selectedCourseIndex);

        // Filter enrollments for the selected course AND semester
        ArrayList<Enrollment> relevantEnrollments = new ArrayList<>();
        for (Enrollment en : enrollmentDirectory.getEnrollments()) {
            if (en.getCourse().getCourseId().equals(selectedCourse.getCourseId()) &&
                en.getCourse().getSemester().equals(selectedSemester)) {
                relevantEnrollments.add(en);
            }
        }

        if (relevantEnrollments.isEmpty()) {
            txtAverageGrade.setText("N/A");
            txtEnrollment.setText("0");
            txtGradeDistribution.setText("No students enrolled.");
            JOptionPane.showMessageDialog(this, "No enrollments found for this course in the selected semester.");
            return;
        }

        // Calculate Metrics
        int enrollmentCount = relevantEnrollments.size();
        double totalGradePoints = 0;
        int gradedCount = 0;
        Map<String, Integer> gradeCounts = new HashMap<>();

        for (Enrollment en : relevantEnrollments) {
            String grade = en.getGrade();
            if (grade != null && !grade.equals("In Progress")) {
                double points = getGradePoint(grade);
                totalGradePoints += points;
                gradedCount++;
                gradeCounts.put(grade, gradeCounts.getOrDefault(grade, 0) + 1);
            } else {
                 // Count "In Progress" separately if needed, or just skip for GPA calculation
                 gradeCounts.put("In Progress", gradeCounts.getOrDefault("In Progress", 0) + 1);
            }
        }

        // Calculate Average GPA
        double averageGpa = (gradedCount > 0) ? totalGradePoints / gradedCount : 0.0;
        DecimalFormat df = new DecimalFormat("#.##"); // Format to 2 decimal places

        // Build Grade Distribution String
        StringBuilder distribution = new StringBuilder();
        // Define a preferred order for grades
        String[] gradeOrder = {"A", "A-", "B+", "B", "B-", "C+", "C", "C-", "F", "In Progress"};
        boolean first = true;
        for (String gradeKey : gradeOrder) {
            if (gradeCounts.containsKey(gradeKey)) {
                 if (!first) {
                    distribution.append(", ");
                }
                distribution.append(gradeKey).append(": ").append(gradeCounts.get(gradeKey));
                first = false;
            }
        }
         // Add any other grades that might not be in the standard list (shouldn't happen with our combo box)
        for (Map.Entry<String, Integer> entry : gradeCounts.entrySet()) {
            boolean found = false;
            for(String orderedGrade : gradeOrder){
                if(entry.getKey().equals(orderedGrade)){
                    found = true;
                    break;
                }
            }
            if(!found){
                 if (!first) {
                    distribution.append(", ");
                }
                 distribution.append(entry.getKey()).append(": ").append(entry.getValue());
                 first = false;
            }
        }


        // Display Results
        txtAverageGrade.setText(df.format(averageGpa));
        txtEnrollment.setText(String.valueOf(enrollmentCount));
        txtGradeDistribution.setText(distribution.toString());

    }//GEN-LAST:event_btnGenerateReportActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
         workArea.remove(this);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.previous(workArea);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnGenerateReport;
    private javax.swing.JComboBox<String> cmbCourse;
    private javax.swing.JComboBox<String> cmbSemester;
    private javax.swing.JLabel lblAverageGrade;
    private javax.swing.JLabel lblCourse;
    private javax.swing.JLabel lblEnrollment;
    private javax.swing.JLabel lblGradeDistribution;
    private javax.swing.JLabel lblSemester;
    private javax.swing.JTextField txtAverageGrade;
    private javax.swing.JTextField txtEnrollment;
    private javax.swing.JTextField txtGradeDistribution;
    // End of variables declaration//GEN-END:variables
private void populateCourseCombo() {
        cmbCourse.removeAllItems();
        facultyCourses.clear();
        for (Course course : courseDirectory.getCourses()) {
            if (course.getFaculty() != null && course.getFaculty().getUniversityId().equals(loggedInFaculty.getUniversityId())) {
                facultyCourses.add(course);
                cmbCourse.addItem(course.toString());
            }
        }
    }

    private void populateSemesterCombo() {
        cmbSemester.removeAllItems();
        // Simple approach: Add semesters present in the faculty's courses
        ArrayList<String> semesters = new ArrayList<>();
        for (Course c : facultyCourses) {
            if (!semesters.contains(c.getSemester())) {
                semesters.add(c.getSemester());
            }
        }
        // Add hardcoded future semesters if needed
        if (!semesters.contains("Spring2026")) semesters.add("Spring2026");
        
        semesters.sort(null); // Sort alphabetically/chronologically
        
        for (String semester : semesters) {
            cmbSemester.addItem(semester);
        }
    }

    // Helper to convert letter grade to GPA points
    private double getGradePoint(String letterGrade) {
        switch (letterGrade) {
            case "A": return 4.0;
            case "A-": return 3.7;
            case "B+": return 3.3;
            case "B": return 3.0;
            case "B-": return 2.7;
            case "C+": return 2.3;
            case "C": return 2.0;
            case "C-": return 1.7;
            // Assuming F is 0.0, adjust if needed
            case "F": return 0.0;
            default: return 0.0; // Default for "In Progress" or unexpected values
        }
    }
}
