/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

// Import necessary classes
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.Course;
import model.Enrollment;
import model.Faculty;
import model.directory.CourseDirectory;
import model.directory.EnrollmentDirectory;
import model.directory.PersonDirectory; // May not be needed but good practice

/**
 *
 * @author zenishborad
 */
public class EnrollmentInsightJPanel extends javax.swing.JPanel {

     private JPanel workArea;
     private Faculty loggedInFaculty;
     private CourseDirectory courseDirectory;
     private EnrollmentDirectory enrollmentDirectory;
     // PersonDirectory personDirectory; // Keep if needed later


    /**
     * Creates new form EnrollmentInsightJPanel (Refactored)
     */
     public EnrollmentInsightJPanel(JPanel workArea, Faculty loggedInFaculty, CourseDirectory courseDirectory, EnrollmentDirectory enrollmentDirectory, PersonDirectory personDirectory) {
        this.workArea = workArea;
        this.loggedInFaculty = loggedInFaculty;
        this.courseDirectory = courseDirectory;
        this.enrollmentDirectory = enrollmentDirectory;
        // this.personDirectory = personDirectory;
        initComponents();
        populateSemesterComboBox();
        // Initially clear the table and totals
        clearTableAndTotals();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSemester = new javax.swing.JLabel();
        cmbSemester = new javax.swing.JComboBox<>();
        btnGenerateInsight = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCourseInsights = new javax.swing.JTable();
        lblStudentsEnrolled = new javax.swing.JLabel();
        txtStudentsEnrolled = new javax.swing.JTextField();
        lblTotalRevenue = new javax.swing.JLabel();
        txtTotalRevenue = new javax.swing.JTextField();
        btnBack = new javax.swing.JButton();

        lblSemester.setText("Semester");

        cmbSemester.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnGenerateInsight.setText("Generate Insight");
        btnGenerateInsight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateInsightActionPerformed(evt);
            }
        });

        tblCourseInsights.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Course Code", "Course Name", "Students Enrolled ", "Total Revenue"
            }
        ));
        jScrollPane1.setViewportView(tblCourseInsights);

        lblStudentsEnrolled.setText("Total Students Enrolled");

        txtStudentsEnrolled.setEditable(false);

        lblTotalRevenue.setText("Total Revenue");

        txtTotalRevenue.setEditable(false);

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblSemester)
                        .addGap(30, 30, 30)
                        .addComponent(cmbSemester, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 135, Short.MAX_VALUE)
                        .addComponent(btnGenerateInsight)
                        .addGap(156, 156, 156))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblStudentsEnrolled)
                            .addComponent(lblTotalRevenue))
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtTotalRevenue, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                            .addComponent(txtStudentsEnrolled))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnBack, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSemester)
                    .addComponent(cmbSemester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGenerateInsight))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStudentsEnrolled)
                    .addComponent(txtStudentsEnrolled, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTotalRevenue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTotalRevenue))
                .addGap(95, 95, 95)
                .addComponent(btnBack))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnGenerateInsightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateInsightActionPerformed
        // TODO add your handling code here:                                                  
    String selectedSemester = (String) cmbSemester.getSelectedItem();
        if (selectedSemester == null) {
            JOptionPane.showMessageDialog(this, "Please select a semester.");
            clearTableAndTotals();
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tblCourseInsights.getModel();
        model.setRowCount(0);

        // Data structure to hold insights per course
        Map<String, CourseInsight> courseInsightsMap = new HashMap<>();

        // 1. Identify courses taught by this faculty in the selected semester
        List<Course> facultySemesterCourses = new ArrayList<>();
        for (Course course : courseDirectory.getCourses()) {
            if (course.getFaculty() != null &&
                course.getFaculty().getUniversityId().equals(loggedInFaculty.getUniversityId()) &&
                selectedSemester.equals(course.getSemester())) {
                facultySemesterCourses.add(course);
                // Initialize map entry for each relevant course
                courseInsightsMap.put(course.getCourseId(), new CourseInsight(course));
            }
        }

        if (facultySemesterCourses.isEmpty()) {
             JOptionPane.showMessageDialog(this, "You are not teaching any courses in " + selectedSemester + ".");
             clearTableAndTotals();
             return;
        }


        // 2. Iterate through ALL enrollments to find students in those specific courses
        for (Enrollment enrollment : enrollmentDirectory.getEnrollments()) {
            String courseId = enrollment.getCourse().getCourseId();
            // Check if this enrollment is for one of the faculty's courses in this semester
            if (courseInsightsMap.containsKey(courseId)) {
                CourseInsight insight = courseInsightsMap.get(courseId);
                insight.incrementEnrollment();
                insight.addRevenue(enrollment.getCourse().getTuitionAmountPerStudent());
            }
        }

        // 3. Populate table and calculate totals
        int grandTotalStudents = 0;
        double grandTotalRevenue = 0;

        for (CourseInsight insight : courseInsightsMap.values()) {
            model.addRow(new Object[]{
                insight.getCourse().getCourseId(),
                insight.getCourse().getTitle(),
                insight.getEnrolledCount(),
                "$" + String.format("%.2f", insight.getTotalRevenue()) // Format currency
            });
            grandTotalStudents += insight.getEnrolledCount();
            grandTotalRevenue += insight.getTotalRevenue();
        }

        // 4. Display totals
        txtStudentsEnrolled.setText(String.valueOf(grandTotalStudents));
        txtTotalRevenue.setText("$" + String.format("%.2f", grandTotalRevenue)); // Format currency

    }//GEN-LAST:event_btnGenerateInsightActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
          workArea.remove(this);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.previous(workArea);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnGenerateInsight;
    private javax.swing.JComboBox<String> cmbSemester;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblSemester;
    private javax.swing.JLabel lblStudentsEnrolled;
    private javax.swing.JLabel lblTotalRevenue;
    private javax.swing.JTable tblCourseInsights;
    private javax.swing.JTextField txtStudentsEnrolled;
    private javax.swing.JTextField txtTotalRevenue;
    // End of variables declaration//GEN-END:variables

   private void populateSemesterComboBox() {
        cmbSemester.removeAllItems();
        // Use a Set to avoid duplicate semesters
        Set<String> semesters = new HashSet<>();
        for (Course course : courseDirectory.getCourses()) {
            // Only add semesters where this faculty teaches
             if (course.getFaculty() != null &&
                course.getFaculty().getUniversityId().equals(loggedInFaculty.getUniversityId())) {
                 semesters.add(course.getSemester());
             }
        }
        // Add hardcoded future semesters if needed
        semesters.add("Spring2026");

        List<String> sortedSemesters = new ArrayList<>(semesters);
        sortedSemesters.sort(null); // Sort

        for (String semester : sortedSemesters) {
            cmbSemester.addItem(semester);
        }
    }

    private void clearTableAndTotals() {
         DefaultTableModel model = (DefaultTableModel) tblCourseInsights.getModel();
         model.setRowCount(0);
         txtStudentsEnrolled.setText("");
         txtTotalRevenue.setText("");
    }

    // Inner helper class to store insights per course
    private static class CourseInsight {
        private Course course;
        private int enrolledCount;
        private double totalRevenue;

        CourseInsight(Course course) {
            this.course = course;
            this.enrolledCount = 0;
            this.totalRevenue = 0;
        }

        void incrementEnrollment() {
            this.enrolledCount++;
        }

        void addRevenue(double amount) {
            this.totalRevenue += amount;
        }

        Course getCourse() {
            return course;
        }

        int getEnrolledCount() {
            return enrolledCount;
        }

        double getTotalRevenue() {
            return totalRevenue;
        }
    }

}
