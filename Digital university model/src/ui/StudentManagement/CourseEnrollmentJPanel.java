/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.StudentManagement;

// Import necessary classes
import info5100.university.example.model.directory.AssignmentDirectory;
import info5100.university.example.model.directory.SubmissionDirectory;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.Course;
import model.Enrollment;
import model.Faculty;
import model.Student;
import model.directory.CourseDirectory;
import model.directory.EnrollmentDirectory;
import model.directory.PersonDirectory;
import ui.TranscriptJPanel;

/**
 *
 * @author zenishborad
 */
public class CourseEnrollmentJPanel extends javax.swing.JPanel {

    private JPanel workArea;
    private Faculty loggedInFaculty;
    private CourseDirectory courseDirectory;
    private EnrollmentDirectory enrollmentDirectory;
    private PersonDirectory personDirectory;
    private ArrayList<Course> facultyCourses;
    private AssignmentDirectory assignmentDirectory;
    private SubmissionDirectory submissionDirectory;// To keep track of courses for the combo box

    /**
     * Creates new form CourseEnrollmentJPanel (Refactored Constructor)
     */
    public CourseEnrollmentJPanel(JPanel workArea, Faculty loggedInFaculty, CourseDirectory courseDirectory,
                            EnrollmentDirectory enrollmentDirectory, PersonDirectory personDirectory,
                            AssignmentDirectory assignmentDirectory, SubmissionDirectory submissionDirectory) { // Added params
    this.workArea = workArea;
    this.loggedInFaculty = loggedInFaculty;
    this.courseDirectory = courseDirectory;
    this.enrollmentDirectory = enrollmentDirectory;
    this.personDirectory = personDirectory;
    this.assignmentDirectory = assignmentDirectory; // Assign param
    this.submissionDirectory = submissionDirectory; // Assign param
    this.facultyCourses = new ArrayList<>();
    initComponents();
    populateCourseCombo();

    cmbCourse.addActionListener(e -> populateEnrolledStudentsTable());
    populateEnrolledStudentsTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cmbCourse = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCourseEnrollment = new javax.swing.JTable();
        btnViewTranscript = new javax.swing.JButton();
        btnProgressReport = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        jLabel1.setText("Course");

        cmbCourse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        tblCourseEnrollment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Student ID", "Name", "Total %", "Grade"
            }
        ));
        jScrollPane1.setViewportView(tblCourseEnrollment);

        btnViewTranscript.setText("View Selected Student Transcript");
        btnViewTranscript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewTranscriptActionPerformed(evt);
            }
        });

        btnProgressReport.setText("Progress Report");
        btnProgressReport.setEnabled(false);
        btnProgressReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProgressReportActionPerformed(evt);
            }
        });

        btnBack.setText("back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel1)
                        .addGap(100, 100, 100)
                        .addComponent(cmbCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 604, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(42, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnViewTranscript)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnProgressReport)
                        .addGap(137, 137, 137))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnViewTranscript)
                    .addComponent(btnProgressReport))
                .addGap(39, 39, 39)
                .addComponent(btnBack)
                .addContainerGap(44, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewTranscriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewTranscriptActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblCourseEnrollment.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a student from the table first.", "No Student Selected", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Get the Student ID from the selected row (assuming it's in column 0)
        int modelRow = tblCourseEnrollment.convertRowIndexToModel(selectedRow);
        String studentId = (String) tblCourseEnrollment.getModel().getValueAt(modelRow, 0);

        // Find the Student object using the ID
        Student selectedStudent = (Student) personDirectory.findById(studentId);

        if (selectedStudent != null) {
            // Open the TranscriptJPanel for the selected student
            // Note: Faculty view might bypass financial holds, or you could add logic here to check student balance if needed.
            TranscriptJPanel transcriptPanel = new TranscriptJPanel(workArea, selectedStudent, enrollmentDirectory);
            workArea.add("FacultyViewTranscript_" + selectedStudent.getUniversityId(), transcriptPanel); // Use unique name
            CardLayout layout = (CardLayout) workArea.getLayout();
            layout.next(workArea);
        } else {
            JOptionPane.showMessageDialog(this, "Could not find details for the selected student.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnViewTranscriptActionPerformed

    private void btnProgressReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProgressReportActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnProgressReportActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        workArea.remove(this);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.previous(workArea);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnProgressReport;
    private javax.swing.JButton btnViewTranscript;
    private javax.swing.JComboBox<String> cmbCourse;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblCourseEnrollment;
    // End of variables declaration//GEN-END:variables

    private void populateCourseCombo() {
        cmbCourse.removeAllItems();
        facultyCourses.clear(); // Clear the list

        // Filter courses assigned to the logged-in faculty
        for (Course course : courseDirectory.getCourses()) {
            if (course.getFaculty() != null && course.getFaculty().getUniversityId().equals(loggedInFaculty.getUniversityId())) {
                facultyCourses.add(course); // Add the Course object
                cmbCourse.addItem(course.toString()); // Add string representation
            }
        }
    }

    private void populateEnrolledStudentsTable() {
        DefaultTableModel model = (DefaultTableModel) tblCourseEnrollment.getModel();
        model.setRowCount(0); // Clear existing rows

        int selectedIndex = cmbCourse.getSelectedIndex();
        if (selectedIndex < 0) {
            return; // No course selected
        }

        Course selectedCourse = facultyCourses.get(selectedIndex);

        // Find enrollments for the selected course
        for (Enrollment enrollment : enrollmentDirectory.getEnrollments()) {
            if (enrollment.getCourse().getCourseId().equals(selectedCourse.getCourseId())) {
                Student student = enrollment.getStudent();
                if (student != null) {
                    Object[] row = new Object[4];
                    row[0] = student.getUniversityId();
                    row[1] = student.getName();
                    row[2] = "N/A"; // Placeholder for Total %
                    row[3] = "N/A"; // Placeholder for Grade
                    model.addRow(row);
                }
            }
        }
    }


   
    }

