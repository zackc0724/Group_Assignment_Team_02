/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import model.Student;

/**
 *
 * @author Your Name
 */
public class StudentFinancialsJPanel extends javax.swing.JPanel {

    private JPanel workArea;
    private Student loggedInStudent;
    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");


    /**
     * Creates new form StudentFinancialsJPanel
     */
    public StudentFinancialsJPanel(JPanel workArea, Student loggedInStudent) {
        this.workArea = workArea;
        this.loggedInStudent = loggedInStudent;
        initComponents();
        displayFinancialInfo();
    }

    private void displayFinancialInfo() {
        // Display current balance
        double balance = loggedInStudent.getBalanceDue();
        lblCurrentBalance.setText("Current Balance Due: $" + String.format("%.2f", balance));

        // Display payment history
        txtPaymentHistory.setText(""); // Clear previous history
        if (loggedInStudent.getPaymentHistory().isEmpty()) {
            txtPaymentHistory.append("No transactions yet.");
        } else {
            for (String record : loggedInStudent.getPaymentHistory()) {
                txtPaymentHistory.append(record + "\n");
            }
        }
        txtPaymentHistory.setCaretPosition(0); // Scroll to top
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblCurrentBalance = new javax.swing.JLabel();
        lblPayAmount = new javax.swing.JLabel();
        btnPayTuition = new javax.swing.JButton();
        lblHistory = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtPaymentHistory = new javax.swing.JTextArea();
        btnBack = new javax.swing.JButton();
        txtPaymentAmount = new javax.swing.JTextField();

        lblTitle.setText("Tuition & Financials");

        lblCurrentBalance.setText("Current Balance Due: $0.00");

        lblPayAmount.setText("Enter Amount to Pay");

        btnPayTuition.setText("Make Payment");
        btnPayTuition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayTuitionActionPerformed(evt);
            }
        });

        lblHistory.setText("Transaction History");

        txtPaymentHistory.setColumns(20);
        txtPaymentHistory.setRows(5);
        jScrollPane1.setViewportView(txtPaymentHistory);

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBack)
                    .addComponent(lblHistory)
                    .addComponent(btnPayTuition)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblPayAmount)
                        .addGap(18, 18, 18)
                        .addComponent(txtPaymentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblCurrentBalance)
                    .addComponent(lblTitle)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(273, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblCurrentBalance)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPayAmount)
                    .addComponent(txtPaymentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnPayTuition)
                .addGap(18, 18, 18)
                .addComponent(lblHistory)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnBack)
                .addContainerGap(180, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        workArea.remove(this);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.previous(workArea);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnPayTuitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPayTuitionActionPerformed
        // TODO add your handling code here:
        double currentBalance = loggedInStudent.getBalanceDue();

        // Check if balance is zero or negative 
        if (currentBalance <= 0) {
            JOptionPane.showMessageDialog(this,
                "Your current balance is $" + String.format("%.2f", currentBalance) + ". No payment is needed at this time.",
                "No Balance Due",
                JOptionPane.INFORMATION_MESSAGE);
            txtPaymentAmount.setText("");
            return;
        }

        // Validate payment amount input
        double paymentAmount;
        try {
            paymentAmount = Double.parseDouble(txtPaymentAmount.getText());
            if (paymentAmount <= 0) {
                JOptionPane.showMessageDialog(this, "Please enter a positive payment amount.", "Invalid Amount", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (paymentAmount > currentBalance) {
                // Optional: Allow overpayment or restrict to exact balance?
                 int choice = JOptionPane.showConfirmDialog(this,
                    "Payment amount ($" + String.format("%.2f", paymentAmount) + ") exceeds the balance due ($" + String.format("%.2f", currentBalance) + ").\nDo you want to pay the full balance instead?",
                    "Overpayment",
                    JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                 if (choice == JOptionPane.YES_OPTION) {
                     paymentAmount = currentBalance;
                 } else {
                     return; // User chose not to proceed
                 }
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid numeric amount.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Process payment
        loggedInStudent.setBalanceDue(currentBalance - paymentAmount);
        String timestamp = DATE_FORMAT.format(new Date());
        loggedInStudent.addPaymentHistoryRecord(timestamp + " - Payment Received: $" + String.format("%.2f", paymentAmount));

        // Update display
        displayFinancialInfo();
        txtPaymentAmount.setText(""); // Clear input field

        JOptionPane.showMessageDialog(this, "Payment of $" + String.format("%.2f", paymentAmount) + " processed successfully!", "Payment Successful", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnPayTuitionActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnPayTuition;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCurrentBalance;
    private javax.swing.JLabel lblHistory;
    private javax.swing.JLabel lblPayAmount;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtPaymentAmount;
    private javax.swing.JTextArea txtPaymentHistory;
    // End of variables declaration//GEN-END:variables
}
